read_html() %>%
html_nodes(xpath='/html/body/div[1]/table[2]/tbody/tr[2]/td[1]/center/table/tbody/tr/td/div/table/tbody/tr[2]/td/table[1]/tbody/tr[3]/td')
vra
vra <- GET(url, add_headers('user-agent' = 'r')) %>%
read_html() %>%
html_nodes('body > div:nth-child(1) > table:nth-child(10) > tbody > tr:nth-child(2) > td:nth-child(1) > center > table > tbody > tr > td > div > table > tbody > tr:nth-child(2) > td > table:nth-child(2) > tbody > tr:nth-child(3) > td')
url <- 'http://www.vra.asn.au/ranges.shtml'
vra <- GET(url, add_headers('user-agent' = 'r')) %>%
read_html() %>%
html_nodes('body > div:nth-child(1) > table:nth-child(10) > tbody > tr:nth-child(2) > td:nth-child(1) > center > table > tbody > tr > td > div > table > tbody > tr:nth-child(2) > td > table:nth-child(2) > tbody > tr:nth-child(3) > td')
vra
url
vra <- GET(url, add_headers('user-agent' = 'r')) %>%
read_html() %>%
html_nodes('td')
vra
html_text(vra[html_attr(vra,'colspan') == 3])
html_attr(vra,'colspan') == '3'
html_text(vra[html_attr(vra,'colspan') == '3']
)
html_text(vra[grep('3',
html_attr(vra,'colspan'))])
tmp = html_text(vra[grep('3',
html_attr(vra,'colspan'))], trim = TRUE)
tmp[1]
tmp[2]
tmp[3]
vra <- GET(url, add_headers('user-agent' = 'r')) %>%
read_html() %>%
html_nodes('td span')
tmp = html_text(vra[grep('style50',
html_attr(vra,'class'))], trim = TRUE)
tmp
vra <- GET(url, add_headers('user-agent' = 'r')) %>%
read_html() %>%
html_nodes('td')
tmp = vra[grep('3', html_attr(vra,'colspan'))]
tmp2 = tmp[grep('style50', html_attr(v,'class'))]
tmp2 = tmp[grep('style50', html_attr(vra,'class'))]
tmp2 = tmp[grep('style50', html_attr(vra,'span class'))]
tmp[[3]]
html_text(tmp[3])
vra <- GET(url, add_headers('user-agent' = 'r')) %>%
read_html() %>%
html_nodes('td strong')
html_text(vra[1])
html_text(vra[2])
url <- 'http://www.vra.asn.au/ranges.shtml'
vra <- GET(url, add_headers('user-agent' = 'r')) %>%
read_html() %>%
html_nodes('td')
library(httr)
library(rvest)
vra <- GET(url, add_headers('user-agent' = 'r')) %>%
read_html() %>%
html_nodes('td')
vra
tmp = vra[grep('3', html_attr(vra,'colspan'))]
tmp
tmp[-grep('Â|_', html_text(tmp))]
tmp2 = tmp[-grep('Â|_', html_text(tmp))]
html_text(tmp2)
vra.range = gsub('\\r|\\n', '', html_text(tmp2, trim = TRUE)
vra.range
vra.range = gsub('\\r|\\n', '', html_text(tmp2, trim = TRUE))
vra.range
tmp3 = gsub('\\r|\\n', '', html_text(tmp2, trim = TRUE))
vra.range = tmp3[grep('range', tmp3, ignore.case = TRUE)]
vra.range
vra.range = data.frame(vra = tmp3[grep('range', tmp3, ignore.case = TRUE)])
library(tidyr)
vra.range = data.frame(vra = tmp3[grep('range', tmp3, ignore.case = TRUE)]) %>%
separate(vra, c('name','address','other'), sep = ' - ', fill = 'right')
View(vra.range)
vra.range = data.frame(vra = tmp3[grep('range', tmp3, ignore.case = TRUE)]) %>%
separate(vra, c('name','address','other'), sep = ' - ', fill = 'right') %>%
separate(address, c('address', 'map'), sep = ' --- ', fill = 'right')
View(vra.range)
vra.range = data.frame(vra = tmp3[grep('range', tmp3, ignore.case = TRUE)]) %>%
separate(vra, c('address', 'map'), sep = ' --- ', fill = 'right') %>%
separate(address, c('name','address','other'), sep = ' - ', fill = 'right')
View(vra.range)
library(dplyr)
vra.range = data.frame(vra = tmp3[grep('range', tmp3, ignore.case = TRUE)]) %>%
separate(vra, c('address', 'map'), sep = ' --- ', fill = 'right') %>%
separate(address, c('name','address','other'), sep = ' - ', fill = 'right') %>%
rowwise() %>%
mutate(map = ifelse('Range Map' %in% address, 'Range Map', map),
address = gsub(' ---- Range Map', '', address))
View(vra.range)
library(ggmap)
vra.range = data.frame(vra = tmp3[grep('range', tmp3, ignore.case = TRUE)]) %>%
separate(vra, c('address', 'map'), sep = ' --- ', fill = 'right') %>%
separate(address, c('name','address','other'), sep = ' - ', fill = 'right') %>%
rowwise() %>%
mutate(map = ifelse('Range Map' %in% address, 'Range Map', map),
address = gsub(' ---- Range Map', '', address)) %>%
do(cbind(.,geocode(iconv(.$address, to="ASCII",sub=""))))
View(vra.range)
gc <- vra.range
do(cbind(.,geocode(iconv(.$address, to="ASCII",sub=""))))
gc <- vra.range %>%
do(cbind(.,geocode(iconv(.$address, to="ASCII",sub=""))))
geocode(iconv('MARYBOROUGH Rifle Range', to="ASCII",sub=""))
geocode(iconv('MIA MIA Rifle Range', to="ASCII",sub=""))
vra.range = data.frame(vra = tmp3[grep('range', tmp3, ignore.case = TRUE)]) %>%
separate(vra, c('address', 'map'), sep = ' --- ', fill = 'right') %>%
separate(address, c('name','address','other'), sep = ' - ', fill = 'right') %>%
rowwise() %>%
mutate(map = ifelse('Range Map' %in% address, 'Range Map', map),
address = gsub(' ---- Range Map', '', address)) %>%
do(cbind(.,geocode(iconv(.$name, to="ASCII",sub=""))))
View(vra.range)
geocode(iconv('9 Rifle Road, Hamilton', to="ASCII",sub=""))
.repath()
.repath()
write.csv(vra.range, 'G:/Advisory and Intelligence/Intelligence and Analysis/Rifle ranges/VRA_webscrape.csv', row.names=F)
url1 = 'http://www.claytarget.com.au/acta-contacts/state-contacts/vic-club-contacts.html'
url2 = 'http://www.claytarget.com.au/acta-contacts/state-contacts/vic-club-contacts.html?start=50'
x1 <- GET(url1, add_headers('user-agent' = 'r')) %>%
read_html() %>%
html_node('#adminForm > ul') %>%
html_nodes('a') %>%
html_attr("href")
x2 <- GET(url2, add_headers('user-agent' = 'r')) %>%
read_html() %>%
html_node('#adminForm > ul') %>%
html_nodes('a') %>%
html_attr("href")
x <- c(x1, x2)
address <- data.frame(name = rep(NA, length(x)),
mailing = rep(NA, length(x)),
location = rep(NA, length(x)),
url = rep(NA, length(x)))
for (i in 1:length(x)) {
url <- paste('http://www.claytarget.com.au', x[i], sep='')
nodes <- GET(url, add_headers('user-agent' = 'r')) %>%
read_html() %>%
#html_nodes('span') %>%
html_nodes('.contact span')
vals = html_text(nodes[grep('name|street|telephone',
html_attr(nodes,'class'))]) %>%
gsub('\\n|\\t', '', .)
address[i, 'name'] <- vals[1]
address[i, 'mailing'] <- vals[2]
address[i, 'location'] <- vals[3]
address[i, 'url'] <- url
}
View(address)
cts <- address %>%
rowwise() %>%
mutate(location = gsub('Ground Location: ', '', location),
location = ifelse(is.na(location), '', location))
View(cts)
cts <- address %>%
rowwise() %>%
mutate(location = gsub('Ground Location: ', '', location),
location = ifelse(is.na(location), '', location)) %>%
do(cbind(.,geocode(iconv(.$location, to="ASCII",sub=""))))
View(cts)
write.csv(cts, 'G:/Advisory and Intelligence/Intelligence and Analysis/Rifle ranges/CTS_webscrape.csv', row.names=F)
pistol.clubs <- data.frame(
name = c('Ararat Pistol Club',
'Ballarat Pistol Club',
'Beaconsfield Pistol Club',
'Bendigo Pistol Club',
'Castlemaine Pistol Club',
'Cohuna Pistol Club',
'Diamond Valley Pistol Club',
'Horsham Pistol Club',
'Melbourne International Shooting Club',
'Melton Pistol Club',
'Mildura Pistol Club',
'Mountain District Pistol Club',
'Murray Valley Pistol Club',
'Oakleigh Pistol Club',
'Peninsula Pistol Club',
'Sale Pistol Club',
'Springvale Pistol Club',
'Traralgon Pistol Club',
'Warragul Drouin Pistol Club',
'Wyndham Handgun Club',
'Yarra Pistol Club')
)
pistol.clubs <- data.frame(
name = c('Ararat Pistol Club',
'Ballarat Pistol Club',
'Beaconsfield Pistol Club',
'Bendigo Pistol Club',
'Castlemaine Pistol Club',
'Cohuna Pistol Club',
'Diamond Valley Pistol Club',
'Horsham Pistol Club',
'Melbourne International Shooting Club',
'Melton Pistol Club',
'Mildura Pistol Club',
'Mountain District Pistol Club',
'Murray Valley Pistol Club',
'Oakleigh Pistol Club',
'Peninsula Pistol Club',
'Sale Pistol Club',
'Springvale Pistol Club',
'Traralgon Pistol Club',
'Warragul Drouin Pistol Club',
'Wyndham Handgun Club',
'Yarra Pistol Club')
) %>%
do(cbind(.,geocode(iconv(.$name, to="ASCII",sub=""))))
library(dplyr)
library(httr)
library(rvest)
library(tidyr)
library(ggmap)
pistol.clubs <- data.frame(
name = c('Ararat Pistol Club',
'Ballarat Pistol Club',
'Beaconsfield Pistol Club',
'Bendigo Pistol Club',
'Castlemaine Pistol Club',
'Cohuna Pistol Club',
'Diamond Valley Pistol Club',
'Horsham Pistol Club',
'Melbourne International Shooting Club',
'Melton Pistol Club',
'Mildura Pistol Club',
'Mountain District Pistol Club',
'Murray Valley Pistol Club',
'Oakleigh Pistol Club',
'Peninsula Pistol Club',
'Sale Pistol Club',
'Springvale Pistol Club',
'Traralgon Pistol Club',
'Warragul Drouin Pistol Club',
'Wyndham Handgun Club',
'Yarra Pistol Club')
) %>%
do(cbind(.,geocode(iconv(.$name, to="ASCII",sub=""))))
View(pistol.clubs)
write.csv(pistol.clubs, 'G:/Advisory and Intelligence/Intelligence and Analysis/Rifle ranges/PISTOL_webscrape.csv', row.names=F)
install.packages(c("knitr", "rmarkdown", "plyr", "dplyr", "readxl"))
install.packages("htmltools")
remove.packages("leaflet")
install.packages("leaflet")
devtools::install_github("mrjoh3/pier")
devtools::install_github('rstudio/DT')
install.packages(c("digest", "viridis"))
devtools::install_github('rstudio/DT')
devtools::install_github("timelyportfolio/rcdimple")
install.packages("G:/Advisory and Intelligence/Intelligence and Analysis/packages/d3wordcloud_0.1.tar.gz", repos = NULL, type = "source")
library(lubridate)
library(knitr)
library(scales)
library(htmltools)
install.packages(c("BH", "boot", "car", "caret", "class", "cluster", "curl", "DBI", "deldir", "devtools", "DiagrammeR", "dismo", "dygraphs", "evaluate", "forecast", "foreign", "geosphere", "ggmap", "ggplot2", "git2r", "gtable", "httr", "lazyeval", "lme4", "lubridate", "maps", "maptools", "MASS", "Matrix", "memoise", "mgcv", "munsell", "networkD3", "nlme", "nnet", "permute", "polyclip", "quantreg", "R6", "raster", "RcppArmadillo", "RcppEigen", "readr", "rgdal", "rgeos", "roxygen2", "rstudioapi", "rvest", "scales", "sp", "spatial", "spatstat", "stringi", "survival", "tidyr", "tseries", "vegan", "visNetwork", "XML", "zoo"))
surface <- get.poly(db, 'water_area', sp$longitude, sp$latitude, 0.005)
water.park.filter <- c('COASTAL RESERVE', 'MARINE NATIONAL PARK - SCHEDULE 7, NATIONAL PARKS ACT', 'MARINE SANCTUARY - SCHEDULE 8, NATIONAL PARKS ACT', 'NATURAL FEATURES RESERVE - GIPPSLAND LAKES RESERVE', 'NATURAL FEATURES RESERVE - LAKE RESERVE', 'NATURAL FEATURES RESERVE - RIVER MURRAY RESERVE', 'NATURAL FEATURES RESERVE - STREAMSIDE RESERVE', 'PORT & COASTAL FACILITY', 'RESERVOIR PARK')
water.park.filter
land.park.filter <- c('FOREST PARK', 'HISTORIC RESERVE', 'METROPOLITAN PARK', 'NATIONAL PARK - SCHEDULE 2, NATIONAL PARKS ACT', 'NATIONAL PARKS ACT SCHEDULE 4 PARK, RESERVE', 'NATURAL FEATURES RESERVE', 'NATURAL FEATURES RESERVE - BUSHLAND RESERVE', 'NATURAL FEATURES RESERVE - HIGHWAY PARK', 'NATURAL FEATURES RESERVE - NATURAL FEATURES AND SCENIC RESERVE', 'NATURE CONSERVATION RESERVE', 'NATURE CONSERVATION RESERVE - FLORA AND FAUNA RESERVE', 'NATURE CONSERVATION RESERVE - FLORA RESERVE', 'NATURE CONSERVATION RESERVE - WILDLIFE RESERVE (NCR CLASSIFICATION PENDING RESERVATION)', 'NATURE CONSERVATION RESERVE - WILDLIFE RESERVE (NO HUNTING)', 'OTHER PARK - SCHEDULE 3, NATIONAL PARKS ACT', 'PHILLIP ISLAND NATURE PARK', 'PV MANAGEMENT SERVICES AGREEMENT OTHER LAND', 'REGIONAL PARK - NOT SCHEDULED UNDER NATIONAL PARKS ACT', 'RESERVOIR PARK', 'STATE PARK - SCHEDULE 2B, NATIONAL PARKS ACT', 'COASTAL RESERVE', 'MARINE NATIONAL PARK - SCHEDULE 7, NATIONAL PARKS ACT', 'MARINE SANCTUARY - SCHEDULE 8, NATIONAL PARKS ACT', 'NATURAL FEATURES RESERVE - GIPPSLAND LAKES RESERVE', 'NATURAL FEATURES RESERVE - LAKE RESERVE', 'NATURAL FEATURES RESERVE - RIVER MURRAY RESERVE', 'NATURAL FEATURES RESERVE - STREAMSIDE RESERVE', 'PORT & COASTAL FACILITY', 'RESERVOIR PARK')
water.park.filter %in% land.park.filter
grep(water.park.filter, land.park.filter)
grep(paste(water.park.filter, collapse = '|'), land.park.filter)
land.park.filter <- land.park.filter[-grep(paste(water.park.filter,
collapse = '|'),
land.park.filter)]
land.park.filter
install.packages("classInt")
install.packages("gplots")
.repath()
library(lubridate)
library(knitr)
library(scales)
library(plyr)
library(dplyr)
library(tidyr)
library(readxl)
library(readr)
library(reshape2)
library(zoo)
library(stringr)
library(leaflet)
library(jsonlite)
library(dygraphs)
library(DT)
#setwd('C:/WORK/repositories/PROFILE_HIGH')
folder <- 'G:/Advisory and Intelligence/Intelligence and Analysis/DATA_STORE'
eom <- function(date) {
# date character string containing POSIXct date
date.lt <- as.POSIXlt(date) # add a month, then subtract a day:
mon <- date.lt$mon + 2
year <- date.lt$year
year <- year + as.integer(mon==13) # if month was December add a year
mon[mon==13] <- 1
iso = ISOdate(1900+year, mon, 1, hour=0, tz=attr(date,"tz"))
result = as.POSIXct(iso) - 86400 # subtract one day
result + (as.POSIXlt(iso)$isdst - as.POSIXlt(result)$isdst)*3600
}
safe.ifelse <- function(cond, yes, no){
class.y <- class(yes)
X <- ifelse(cond,yes,no)
class(X) <- class.y
return(X)
}
inspections <- read_excel(paste(folder, 'Inspections_Premise.xlsx', sep='/'),
skip=3, na='#') %>%
mutate_each(funs(ifelse(. == 'X', 1, 0)), matches('Flag')) %>%
mutate_each(funs(ifelse(grepl('9999|111111|NOT APPLICABLE', .), NA, .)), matches('Australian')) %>%
rowwise() %>%
mutate(date = safe.ifelse(is.na(`Inspection Start Date`),
`Creation Date`,
`Inspection Start Date`),
year = year(date),
month = month(date),
yearmon = zoo::as.yearmon(date),
DutyHolder.ABN.ACN = ifelse(sum(
is.na(`Duty Holder Insp/Notice Rep - Australian Business (Key)`),
is.na(`Duty Holder Insp/Notice Rep - Australian Company N (Key)`)) > 1, 'missing', "found"),
Premise.ABN.ACN = ifelse(sum(
is.na(`Premises - Australian Business (Key)`),
is.na(`Premises - Australian Company N (Key)`)) > 1, 'missing', "found")) %>%
filter(date > '2012-07-01',
date < eom(now())) %>%
rename(sched = `Premises - Schedule Category (Key)`,
anzsic = `Premises - ANZSIC code (Key)`,
ibase = `Premises - IBase Number (Key)`,
GIS_ID = `Site - GIS ID (Key)`) %>%
group_by(yearmon) %>%
summarise(`Inspection Start Date` = sum(is.na(`Inspection Start Date`)) / n(),
`Inspection End Date` = sum(is.na(`Inspection End Date`)) / n(),
`ANZSIC` = sum(is.na(anzsic)) / n(),
`GIS Data` = sum(is.na(GIS_ID)) / n(),
premises_address = sum(is.na(premises_address)) / n(),
DutyHolder.ABN.ACN = sum(DutyHolder.ABN.ACN == 'missing') / n(),
Premise.ABN.ACN = sum(Premise.ABN.ACN == 'missing') / n()) %>%
filter(!is.na(yearmon))
View(inspections)
colnames(inspections)
library(dygraphs)
incidents <- read_excel(paste(folder, 'General Incident Report.xlsx', sep='/'),
skip=1, na='#')
colnames(incidents)
incidents <- read_excel(paste(folder, 'General Incident Report.xlsx', sep='/'),
sheet = 'General Incident Report',
skip=1, na='#')
colnames(incidents)
View(incidents)
incidents <- read_excel(paste(folder, 'General Incident Report.xlsx', sep='/'),
sheet = 'General Incident Report',
skip=1, na='#') %>%
#mutate_each(funs(ifelse(. == 'X', 1, 0)), matches('Flag')) %>%
mutate_each(funs(ifelse(grepl('9999|111111|NOT APPLICABLE|Not assigned|UNKNOWN', .), NA, .)),
matches('Category'),
matches('Source'),
one_of('Council'))
View(incidents)
colnames(incidents)
incidents <- read_excel(paste(folder, 'General Incident Report.xlsx', sep='/'),
sheet = 'General Incident Report',
skip=1, na='#') %>%
#mutate_each(funs(ifelse(. == 'X', 1, 0)), matches('Flag')) %>%
mutate_each(funs(ifelse(grepl('9999|111111|NOT APPLICABLE|Not assigned|UNKNOWN|#', .), NA, .)),
matches('Category'),
matches('Source'),
one_of('Council')) %>%
rowwise() %>%
mutate(date = `Calendar day (creation date)`,
year = year(date),
month = month(date),
yearmon = zoo::as.yearmon(date),
) %>%
filter(date > '2012-07-01',
date < eom(now())) %>%
rename(GIS_ID = `Site - GIS ID (Key)`) %>%
group_by(yearmon) %>%
summarise(`Category 1` = sum(is.na(`Category 1`)) / n(),
`Category 2` = sum(is.na(`Category 2`)) / n(),
`Category 3` = sum(is.na(`Category 3`)) / n(),
Council = sum(is.na(Council)) / n(),
`GIS Data` = sum(is.na(GIS_ID)) / n(),
`Close Date` = sum(is.na(`Close Date`)) / n(),
`Alleged Source` = sum(is.na(`Alleged Source`)) / n(),
`Likely Source` = sum(is.na(`Likely Source`)) / n(),
`Identified Source` = sum(is.na(`Identified Source`)) / n()) %>%
filter(!is.na(yearmon))
incidents <- read_excel(paste(folder, 'General Incident Report.xlsx', sep='/'),
sheet = 'General Incident Report',
skip=1, na='#') %>%
#mutate_each(funs(ifelse(. == 'X', 1, 0)), matches('Flag')) %>%
mutate_each(funs(ifelse(grepl('9999|111111|NOT APPLICABLE|Not assigned|UNKNOWN|#', .), NA, .)),
matches('Category'),
matches('Source'),
one_of('Council')) %>%
rowwise() %>%
mutate(date = `Calendar day (creation date)`,
year = year(date),
month = month(date),
yearmon = zoo::as.yearmon(date),
)
incidents <- read_excel(paste(folder, 'General Incident Report.xlsx', sep='/'),
sheet = 'General Incident Report',
skip=1, na='#') %>%
#mutate_each(funs(ifelse(. == 'X', 1, 0)), matches('Flag')) %>%
mutate_each(funs(ifelse(grepl('9999|111111|NOT APPLICABLE|Not assigned|UNKNOWN|#', .), NA, .)),
matches('Category'),
matches('Source'),
one_of('Council'))
rm(incidents)
incidents <- read_excel(paste(folder, 'General Incident Report.xlsx', sep='/'),
sheet = 'General Incident Report',
skip=1, na='#') %>%
#mutate_each(funs(ifelse(. == 'X', 1, 0)), matches('Flag')) %>%
mutate_each(funs(ifelse(grepl('9999|111111|NOT APPLICABLE|Not assigned|UNKNOWN|#', .), NA, .)),
matches('Category'),
matches('Source'),
one_of('Council'))
incidents <- read_excel(paste(folder, 'General Incident Report.xlsx', sep='/'),
sheet = 'General Incident Report',
skip=1, na='#') %>%
#mutate_each(funs(ifelse(. == 'X', 1, 0)), matches('Flag')) %>%
mutate_each(funs(ifelse(grepl('9999|111111|NOT APPLICABLE|Not assigned|UNKNOWN|#', .), NA, .)),
matches('Category'),
matches('Source'),
one_of('Council')) %>%
rowwise() %>%
mutate(date = `Calendar day (creation date)`
)
incidents <- read_excel(paste(folder, 'General Incident Report.xlsx', sep='/'),
sheet = 'General Incident Report',
skip=1, na='#') %>%
#mutate_each(funs(ifelse(. == 'X', 1, 0)), matches('Flag')) %>%
mutate_each(funs(ifelse(grepl('9999|111111|NOT APPLICABLE|Not assigned|UNKNOWN|#', .), NA, .)),
matches('Category'),
matches('Source'),
one_of('Council')) %>%
rowwise() %>%
mutate(date = `Calendar day (creation date)`,
year = year(date),
month = month(date),
yearmon = zoo::as.yearmon(date)
) %>%
filter(date > '2012-07-01',
date < eom(now())) %>%
rename(GIS_ID = `Site - GIS ID (Key)`) %>%
group_by(yearmon) %>%
summarise(`Category 1` = sum(is.na(`Category 1`)) / n(),
`Category 2` = sum(is.na(`Category 2`)) / n(),
`Category 3` = sum(is.na(`Category 3`)) / n(),
Council = sum(is.na(Council)) / n(),
`GIS Data` = sum(is.na(GIS_ID)) / n(),
`Close Date` = sum(is.na(`Close Date`)) / n(),
`Alleged Source` = sum(is.na(`Alleged Source`)) / n(),
`Likely Source` = sum(is.na(`Likely Source`)) / n(),
`Identified Source` = sum(is.na(`Identified Source`)) / n()) %>%
filter(!is.na(yearmon))
incidents %>%
#select(yearmon, starts_with('Inspect'), `GIS Data`, premises_address) %>%
xts::as.xts(.[,-1], order.by=.$yearmon) %>%
dygraph(xts::as.xts(inspections[,-1], order.by=inspections$yearmon),
main = 'Proportion of Missing Data') %>%
dyAxis("x", drawGrid = FALSE, pixelsPerLabel = 100, label = '') %>%
dyLegend(show = "follow") %>%
dyOptions(axisLineWidth = 1.5, gridLineColor = "lightblue") %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesBackgroundAlpha = 0.2,
hideOnMouseOut = FALSE) %>%
dyShading(from = 0, to = 0.01, axis = "y", color = '#e0fde0')
setwd("C:/WORK/packages/govhack2016")
library(shiny); print(source('govhack2016.R')$value)
print(source('govhack2016.R')$value)
print(source('govhack2016.R')$value)
library(readr)
library(plyr)
library(dplyr)
library(stringr)
pop <- read_csv('csv/vic_popn_by_suburb.csv') %>%
mutate(SSC_CODE = as.integer(str_sub(region_id, 4))) %>%
filter(SSC_CODE >= 20000, SSC_CODE < 30000) %>%
dplyr::select(SSC_CODE, Population = Tot_P_P, Name, AreaSQKM)
roads <- read_csv('csv/road_length_by_suburb.csv') %>%
filter(SSC_CODE >= 20000, SSC_CODE < 30000) %>%
dplyr::select(SSC_CODE, roads = Sum_LENGTH) %>%
mutate(roads.p = roads / max(.$roads, na.rm = TRUE))
rail <- read_csv('csv/rail_by_suburb.csv') %>%
filter(SSC_CODE >= 20000, SSC_CODE < 30000) %>%
dplyr::select(SSC_CODE, rail = Sum_LENGTH) %>%
mutate(rail.p = rail / max(.$rail, na.rm = TRUE))
built <- read_csv('csv/builtup_area_by_suburb.csv') %>%
filter(SSC_CODE >= 20000, SSC_CODE < 30000) %>%
dplyr::select(SSC_CODE, built = Sum_AREA) %>%
mutate(built.p = built / max(.$built, na.rm = TRUE))
parks<- read_csv('csv/public_land_by_suburb.csv') %>%
filter(SSC_CODE >= 20000, SSC_CODE < 30000) %>%
dplyr::select(SSC_CODE, parks = Sum_AREA)
forest <- read_csv('csv/forest_by_suburb.csv') %>%
filter(SSC_CODE >= 20000, SSC_CODE < 30000) %>%
dplyr::select(SSC_CODE, forest = Sum_AREA)
df <- join_all(list(pop,
roads,
rail,
built,
parks,
forest),
by = 'SSC_CODE', match = 'first') %>%
rowwise() %>%
mutate(reserve = sum(parks, forest, na.rm=TRUE))
subs <- df %>%
mutate(reserve.p = reserve / max(.$reserve, na.rm = TRUE))
head(subs)
head(df)
subs <- df %>%
rowwise() %>%
mutate(reserve.p = reserve / max(.$reserve, na.rm = TRUE))
head(subs)
